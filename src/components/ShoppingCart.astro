---
// Shopping Cart Component using Tailwind CSS
---

<!-- Shopping Cart Drawer -->
<div class="fixed top-0 right-0 h-full w-96 sm:w-[28rem] bg-bg shadow-2xl z-[1001] transform translate-x-full transition-transform duration-500 ease-in-out flex flex-col" id="cart-drawer">
  <div class="flex items-center justify-between p-6 border-b border-fg/10">
    <h2 class="text-2xl font-semibold text-fg">Your Cart</h2>
    <button class="flex items-center justify-center w-10 h-10 rounded-lg hover:bg-fg/10 transition-colors duration-200 text-fg" id="cart-close" aria-label="Close shopping cart">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
  </div>

  <div class="flex-1 overflow-y-auto">
    <!-- Empty Cart State -->
    <div class="flex flex-col items-center justify-center h-full text-center py-16" id="cart-empty">
      <div class="mb-6 text-fg/40">
        <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
          <path d="M6 2 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4Z"/>
          <path d="m3 6 18 0"/>
          <path d="M16 10a4 4 0 0 1-8 0"/>
        </svg>
      </div>
      <h3 class="text-xl font-semibold text-fg mb-3">Your cart is empty</h3>
      <p class="text-fg/70 mb-8 text-base">Add some products to get started!</p>
      <button class="bg-primary text-bg px-8 py-3 rounded-lg font-medium hover:bg-primary/90 transition-colors duration-200" id="continue-shopping">Continue Shopping</button>
    </div>

    <!-- Cart Items -->
    <div class="hidden" id="cart-items">
      <div class="space-y-1" id="cart-items-list">
        <!-- Cart items will be dynamically inserted here -->
      </div>
    </div>
  </div>

  <!-- Cart Footer -->
  <div class="hidden border-t border-fg/10 p-2 bg-bg flex flex-col h-auto mt-auto" id="cart-footer">
    <div class="space-y-4 flex-grow">
      <div class="flex justify-between text-base">
        <span class="text-fg/70">Subtotal:</span>
        <span class="font-medium text-fg" id="cart-subtotal">$0.00</span>
      </div>
      <div class="flex justify-between text-base">
        <span class="text-fg/70">Shipping:</span>
        <span class="font-medium text-primary">Free</span>
      </div>
    </div>
    <div class="mt-auto pt-4">
      <div class="flex justify-between text-xl font-semibold border-t border-fg/10 pt-4 mb-6">
        <span class="text-fg">Total:</span>
        <span class="text-primary" id="cart-total">$0.00</span>
      </div>
      <button class="w-full bg-primary text-bg py-4 rounded-lg font-semibold text-lg hover:bg-primary/90 transition-colors duration-200" id="checkout-btn">
        Proceed to Checkout
      </button>
    </div>
  </div>
</div>

<!-- Cart Overlay -->
<div class="fixed inset-0 bg-black/50 z-[1000] opacity-0 invisible transition-all duration-300" id="cart-overlay"></div>

<script>
  // Cart state management
  interface CartItem {
    id: number;
    title: string;
    price: string;
    image: string;
    quantity: number;
    category: string;
    size?: string;
    color?: string;
    colorValue?: string;
    quality?: string;
    customUrl?: string;
  }

  class ShoppingCart {
    private items: CartItem[] = [];
    private isOpen: boolean = false;

    constructor() {
      this.loadCartFromStorage();
      this.bindEvents();
      this.updateCartDisplay();
    }

    private bindEvents() {
      // Cart toggle events
      const cartButton = document.querySelector('.cart-button');
      const cartClose = document.getElementById('cart-close');
      const cartOverlay = document.getElementById('cart-overlay');
      const continueShoppingBtn = document.getElementById('continue-shopping');

      cartButton?.addEventListener('click', () => this.toggleCart());
      cartClose?.addEventListener('click', () => this.closeCart());
      cartOverlay?.addEventListener('click', () => this.closeCart());
      continueShoppingBtn?.addEventListener('click', () => this.closeCart());

      // Listen for add to cart events
      document.addEventListener('addToCart', (event: Event) => {
        const customEvent = event as CustomEvent;
        this.addItem(customEvent.detail);
      });

      // Checkout button
      const checkoutBtn = document.getElementById('checkout-btn');
      checkoutBtn?.addEventListener('click', () => this.proceedToCheckout());
    }

    public toggleCart() {
      if (this.isOpen) {
        this.closeCart();
      } else {
        this.openCart();
      }
    }

    public openCart() {
      const cartDrawer = document.getElementById('cart-drawer');
      const cartOverlay = document.getElementById('cart-overlay');
      
      cartDrawer?.classList.remove('translate-x-full');
      cartOverlay?.classList.remove('opacity-0', 'invisible');
      cartOverlay?.classList.add('opacity-100', 'visible');
      document.body.classList.add('overflow-hidden');
      this.isOpen = true;
    }

    public closeCart() {
      const cartDrawer = document.getElementById('cart-drawer');
      const cartOverlay = document.getElementById('cart-overlay');
      
      cartDrawer?.classList.add('translate-x-full');
      cartOverlay?.classList.add('opacity-0', 'invisible');
      cartOverlay?.classList.remove('opacity-100', 'visible');
      document.body.classList.remove('overflow-hidden');
      this.isOpen = false;
    }

    public addItem(product: Omit<CartItem, 'quantity'>) {
      // Check for existing item with same configuration (id, size, color, quality, customUrl)
      const existingItem = this.items.find(item => 
        item.id === product.id &&
        item.size === product.size &&
        item.color === product.color &&
        item.quality === product.quality &&
        item.customUrl === product.customUrl
      );
      
      if (existingItem) {
        existingItem.quantity += 1;
      } else {
        this.items.push({ ...product, quantity: 1 });
      }
      
      this.saveCartToStorage();
      this.updateCartDisplay();
      this.showAddedToCartFeedback();
    }

    public removeItem(productId: number) {
      this.items = this.items.filter(item => item.id !== productId);
      this.saveCartToStorage();
      this.updateCartDisplay();
    }

    public updateQuantity(productId: number, quantity: number) {
      const item = this.items.find(item => item.id === productId);
      if (item) {
        if (quantity <= 0) {
          this.removeItem(productId);
        } else {
          item.quantity = quantity;
          this.saveCartToStorage();
          this.updateCartDisplay();
        }
      }
    }

    private updateCartDisplay() {
      this.updateCartCount();
      this.updateCartItems();
      this.updateCartSummary();
    }

    private updateCartCount() {
      const cartCount = document.querySelector('.cart-count');
      const totalItems = this.items.reduce((sum, item) => sum + item.quantity, 0);
      
      if (cartCount) {
        cartCount.textContent = totalItems.toString();
        if (totalItems > 0) {
          cartCount.classList.remove('hidden');
        } else {
          cartCount.classList.add('hidden');
        }
      }
    }

    private updateCartItems() {
      const cartEmpty = document.getElementById('cart-empty');
      const cartItems = document.getElementById('cart-items');
      const cartItemsList = document.getElementById('cart-items-list');
      const cartFooter = document.getElementById('cart-footer');

      if (this.items.length === 0) {
        cartEmpty?.classList.remove('hidden');
        cartItems?.classList.add('hidden');
        cartFooter?.classList.add('hidden');
      } else {
        cartEmpty?.classList.add('hidden');
        cartItems?.classList.remove('hidden');
        cartFooter?.classList.remove('hidden');

        // Render cart items
        cartItemsList!.innerHTML = this.items.map(item => this.renderCartItem(item)).join('');
        
        // Bind quantity controls
        this.bindQuantityControls();
      }
    }

    private renderCartItem(item: CartItem): string {
      const itemTotal = (parseFloat(item.price.replace('$', '')) * item.quantity).toFixed(2);
      
      // Generate color box class based on colorValue
      const getColorClass = (colorValue: string) => {
        switch(colorValue) {
          case 'white': return 'bg-white border-gray-300';
          case 'black': return 'bg-black';
          case 'navy': return 'bg-blue-900';
          case 'gray': return 'bg-gray-500';
          default: return 'bg-black';
        }
      };
      
      const colorClass = getColorClass(item.colorValue || 'black');
      const hasCustomUrl = item.customUrl && item.customUrl.trim().length > 0;
      
      return `
        <div class="flex gap-5 p-5 bg-bg/50" data-id="${item.id}">
          <div class="w-20 h-20 flex-shrink-0">
            <img src="${item.image}" alt="${item.title}" class="w-full h-full object-cover rounded-xl" />
          </div>
          <div class="flex-1 min-w-0">
            <h4 class="font-medium text-fg text-base truncate mb-2">${item.title}</h4>
            
            <!-- Product Details -->
            <div class="mb-3">
              <div class="flex items-center gap-2 text-sm text-fg/70 flex-wrap">
                <span class="bg-fg/10 px-2 py-0.5 rounded text-fg font-medium">${item.size || 'L'}</span>
                <span class="text-fg/40">/</span>
                <div class="flex items-center gap-1">
                  <div class="w-3 h-3 rounded border ${colorClass}"></div>
                  <span class="bg-fg/10 px-2 py-0.5 rounded text-fg font-medium">${item.color || 'Black'}</span>
                </div>
                <span class="text-fg/40">/</span>
                <span class="bg-primary/10 px-2 py-0.5 rounded text-primary font-medium capitalize">${item.quality || 'Premium'}</span>
                ${hasCustomUrl ? `
                  <span class="text-fg/40">/</span>
                  <div class="flex items-center gap-1">
                    <svg class="w-3 h-3 text-primary" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M13.19 8.688a4.5 4.5 0 011.242 7.244l-4.5 4.5a4.5 4.5 0 01-6.364-6.364l1.757-1.757m13.35-.622l1.757-1.757a4.5 4.5 0 00-6.364-6.364l-4.5 4.5a4.5 4.5 0 001.242 7.244" />
                    </svg>
                    <span class="bg-primary/10 px-2 py-0.5 rounded text-primary font-medium text-xs">Custom</span>
                  </div>
                ` : ''}
              </div>
            </div>
            
            <div class="flex items-center justify-between">
              <div class="flex items-center gap-3">
                <span class="text-sm font-medium text-fg/70">Qty:</span>
                <button class="quantity-btn decrease w-8 h-8 rounded-full bg-fg/10 hover:bg-fg/20 flex items-center justify-center text-fg text-base transition-colors duration-200" data-id="${item.id}">-</button>
                <span class="quantity-display text-base font-semibold text-fg min-w-[24px] text-center bg-primary/10 px-2 py-1 rounded">${item.quantity}</span>
                <button class="quantity-btn increase w-8 h-8 rounded-full bg-fg/10 hover:bg-fg/20 flex items-center justify-center text-fg text-base transition-colors duration-200" data-id="${item.id}">+</button>
              </div>
              <button class="remove-item p-2 hover:bg-red-100 rounded-lg text-red-500 hover:text-red-700 transition-colors duration-200" data-id="${item.id}">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M3 6h18M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2m3 0v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6h14ZM10 11v6M14 11v6"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="text-right flex flex-col justify-between py-1">
            <span class="text-sm text-fg/70">${item.price}</span>
            <span class="text-base font-semibold text-primary">$${itemTotal}</span>
          </div>
        </div>
      `;
    }

    private bindQuantityControls() {
      // Quantity increase/decrease buttons
      document.querySelectorAll('.quantity-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const productId = parseInt(target.dataset.id!);
          const isIncrease = target.classList.contains('increase');
          const item = this.items.find(item => item.id === productId);
          
          if (item) {
            const newQuantity = isIncrease ? item.quantity + 1 : item.quantity - 1;
            this.updateQuantity(productId, newQuantity);
          }
        });
      });

      // Remove item buttons
      document.querySelectorAll('.remove-item').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const button = target.closest('.remove-item') as HTMLElement;
          const productId = parseInt(button.dataset.id!);
          this.removeItem(productId);
        });
      });
    }

    private updateCartSummary() {
      const subtotal = this.items.reduce((sum, item) => {
        return sum + (parseFloat(item.price.replace('$', '')) * item.quantity);
      }, 0);

      const subtotalElement = document.getElementById('cart-subtotal');
      const totalElement = document.getElementById('cart-total');

      if (subtotalElement) subtotalElement.textContent = `$${subtotal.toFixed(2)}`;
      if (totalElement) totalElement.textContent = `$${subtotal.toFixed(2)}`;
    }

    private showAddedToCartFeedback() {
      // Simple feedback - could be enhanced with a toast notification
      const cartButton = document.querySelector('.cart-button');
      cartButton?.classList.add('scale-110', 'text-primary');
      setTimeout(() => {
        cartButton?.classList.remove('scale-110', 'text-primary');
      }, 300);
    }

    private proceedToCheckout() {
      // For now, just show an alert - this would integrate with a payment system
      alert(`Proceeding to checkout with ${this.items.length} items totaling $${this.getCartTotal().toFixed(2)}`);
    }

    private getCartTotal(): number {
      return this.items.reduce((sum, item) => {
        return sum + (parseFloat(item.price.replace('$', '')) * item.quantity);
      }, 0);
    }

    private saveCartToStorage() {
      localStorage.setItem('shopping-cart', JSON.stringify(this.items));
    }

    private loadCartFromStorage() {
      const saved = localStorage.getItem('shopping-cart');
      if (saved) {
        try {
          this.items = JSON.parse(saved);
        } catch (e) {
          this.items = [];
        }
      }
    }
  }

  // Initialize cart when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    window.shoppingCart = new ShoppingCart();
  });

  // Make cart available globally for debugging
  declare global {
    interface Window {
      shoppingCart: ShoppingCart;
    }
  }
</script> 